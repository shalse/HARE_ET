using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using ET_Project_GUI.Network;
using ET_Project_GUI.ET_Calibration;
using System.IO;
using System.Diagnostics;
using System.Drawing.Imaging;

namespace ET_Project_GUI
{
    public partial class MainForm : Form
    {
        //global variables
        private ETController ETDevice;
        private ETCalibrate calibrateET;
        //ToDO classify


        /// <summary>
        /// This is the main form that we will use in a windows based environment. It also sets the default selections for the dropdown/combo boxes
        /// </summary>
        public MainForm()
        {       
            //TODO Launch ET Server (if not started)
                      
            //init components
            ETDevice = new ETController();
            calibrateET = new ETCalibrate();

            //init ui components (auto generated)
            InitializeComponent();
        }

        private void MainForm_Load(object sender, EventArgs e)
        {

        }
        //*******************************************
        //      CALIBRATION
        //*******************************************
        /// <summary>
        /// This is the button click handler used to load and connect the application to the eye tracking server
        /// </summary>
        /// <param name="sender">Auto generated by the button</param>
        /// <param name="e">Auto generated by the button</param>
        private void Cal_Connect_Button_Click(object sender, EventArgs e)
        {

            // TODO launch SMI Eye tracker server automatically

            ETConnection connectToEyeTracker = new ETConnection();
            int res =  connectToEyeTracker.connect(ETDevice);


            if (res == 104)//res 104 is used if no server has been started
            {
                DialogResult messagebox = MessageBox.Show("Could not connect to SMI Eye Tracker\n\nPlease check the Eye Tracker server has been started", "Error Connecting to Eye Tracker Server",
                    MessageBoxButtons.RetryCancel, MessageBoxIcon.Error);
                if (messagebox == DialogResult.Retry)
                {
                    Cal_Connect_Button_Click(sender, e);
                }
                
            }
            else if (res != 1)//any other message (see SMI manual for error codes)
            {
                //display message box
                MessageBox.Show("Could not connect to Eye Tracker!", "Error Connecting to Eye Tracker Server",
                    MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            else//connection succesful enable next step
            {
                //Display eye position on the observation monitor
                ETTrackingMonitor trackingMonitor = new ETTrackingMonitor(ETDevice, observationMonitorPictureBox);
               
                
                //Allow/Enable the next step (Calibration)
                Cal_Calibrate_Button.Enabled = true;

            }
        }
        /// <summary>
        /// This  is the button click handler used to calibrate the eye tracker
        /// </summary>
        /// <param name="sender">Auto generated by the button</param>
        /// <param name="e">Auto generated by the button</param>
        private void Cal_Calibrate_Button_Click(object sender, EventArgs e)
        {
            if(calibrateET.Calibrate(ETDevice) != 1)
            {
                //TODO add could not calibrate the ET error message
                Console.WriteLine("Could not connect to EyeTracker");
            }
            else
            { 
                Cal_Validate_Button.Enabled = true;
            }
        }
        /// <summary>
        /// This  is the button click handler used to validate the eye tracker calibration
        /// </summary>
        /// <param name="sender">Auto generated by the button</param>
        /// <param name="e">Auto generated by the button</param>
        private void Cal_Validate_Button_Click(object sender, EventArgs e)
        {
            // TODO add logic to validate ET
            ETValidate etVal = new ETValidate();
            etVal.validate(ETDevice, calibrationAccuracyPictureBox);
        }
        /// <summary>
        /// This  is the button click handler that loads a larger view of the accuracy image
        /// </summary>
        /// <param name="sender">Auto generated by the button</param>
        /// <param name="e">Auto generated by the button</param>
        private void Cal_CheckAccuracy_Button_Click(object sender, EventArgs e)
        {
            // TODO add logic to check accuracy/load accuracy image ET
        }
        
        //*******************************************
        //      DATA RECORDING
        //*******************************************
        /// <summary>
        /// This  is the button click handler used save the accuracy image to a jpg file for later reference
        /// </summary>
        /// <param name="sender">Auto generated by the button</param>
        /// <param name="e">Auto generated by the button</param>
        private void DataRec_SaveCalAcc_Button_Click(object sender, EventArgs e)
        {
            // TODO add save the calibration image
        }
        /// <summary>
        /// This  is the button click handler used to start recording eye tracker data (eye position) at a selected sample rate to out built in database. It also
        /// start the recording of the avi video with the eyeposition overlayed onto it
        /// </summary>
        /// <param name="sender">Auto generated by the button</param>
        /// <param name="e">Auto generated by the button</param>
        private void DataRec_StartDataRec_Button_Click(object sender, EventArgs e)
        {
            // TODO start recording data to db (seperate thread)
            // TODO start recording the AVI (seperate thread)
        }
        /// <summary>
        /// This  is the button click handler used to stop recording data and the AVI video
        /// </summary>
        /// <param name="sender">Auto generated by the button</param>
        /// <param name="e">Auto generated by the button</param>
        private void DataRec_StopDataRec_Button_Click(object sender, EventArgs e)
        {
            // TODO stop recording data
            // TODO stop recording AVI

        }
       
        //*******************************************
        //      OBSERVATION
        //*******************************************
        /// <summary>
        /// This  is the button click handler used to load the eye position monitor (show your eyes are in correct position). It is only enabled after your have succesfully connected to the ET.
        /// </summary>
        /// <param name="sender">Auto generated by the button</param>
        /// <param name="e">Auto generated by the button</param>
        private void Obs_TrackingMonitor_Button_Click(object sender, EventArgs e)
        {
            // TODO disable until connected to the ET server 
            // TODO add logic to load tracking monitor (the "white eyes" image)
        }
        /// <summary>
        /// This  is the button click handler used to load a live black and white video of your eyes
        /// </summary>
        /// <param name="sender">Auto generated by the button</param>
        /// <param name="e">Auto generated by the button</param>
        private void Obs_EyeImageMonitor_Button_Click(object sender, EventArgs e)
        {
            // TODO add logic to load Eye image monitor (the black and white vid of your eyes)
        }
        /// <summary>
        /// This  is the button click handler used to load the remote view. Note that this option will become disabled if you are connected to the eye tracker. The purpose
        /// of this functionality is to watch someone on another comuter to observe what they are looking at in live time.
        /// </summary>
        /// <param name="sender">Auto generated by the button</param>
        /// <param name="e">Auto generated by the button</param>
        private void Obs_RemoteView_Button_Click(object sender, EventArgs e)
        {
            // TODO disable if calibrations is clicked (we dont want to allow this behavior)
            // TODO add logic for loading remote view
        }
        
        //*******************************************
        //      APPLICATIONS
        //*******************************************
        /// <summary>
        /// This  is the button click handler used to load the Simon Says game
        /// </summary>
        /// <param name="sender">Auto generated by the button</param>
        /// <param name="e">Auto generated by the button</param>
        private void App_SimonSays_Button_Click(object sender, EventArgs e)
        {
            // TODO add logic for loading simon says app
        }
        /// <summary>
        /// This  is the button click handler used to load the Maze game
        /// </summary>
        /// <param name="sender">Auto generated by the button</param>
        /// <param name="e">Auto generated by the button</param>
        private void App_Maze_Button_Click(object sender, EventArgs e)
        {
            // TODO add logic for loading maze app
        }
        /// <summary>
        /// This  is the button click handler used to load the Keyboard control app
        /// </summary>
        /// <param name="sender">Auto generated by the button</param>
        /// <param name="e">Auto generated by the button</param>
        private void App_KeyboardControl_Button_Click(object sender, EventArgs e)
        {
            // TODO add logic for loading keyboard control app
        }
        /// <summary>
        /// This  is the button click handler used to load the Mouse control app
        /// </summary>
        /// <param name="sender">Auto generated by the button</param>
        /// <param name="e">Auto generated by the button</param>
        private void App_MouseControl_Button_Click(object sender, EventArgs e)
        {
            // TODO add logic for loading mouse control app
        }
        /// <summary>
        /// This  is the button click handler used to load/launch any .exe file
        /// </summary>
        /// <param name="sender">Auto generated by the button</param>
        /// <param name="e">Auto generated by the button</param>
        private void App_OtherApps_Button_Click(object sender, EventArgs e)
        {
            // TODO add logic for loading other apps
            OpenFileDialog openFileDialog = new OpenFileDialog();
            Process launcher = new Process();
            openFileDialog.Filter = "Executables|*.exe|All Files (*.*)|*.*";
            openFileDialog.FilterIndex = 1;
            DialogResult res = openFileDialog.ShowDialog();

            if (File.Exists(openFileDialog.FileName) && res == DialogResult.OK)
            {
                launcher.StartInfo.FileName = openFileDialog.FileName;
                launcher.Start();
            }
            else if (res == DialogResult.Cancel)
            {
            }
            else
            {
                MessageBox.Show("Error opening file!"); //Error message if the file does not open
            }
        }

        private void callibrationDataChanged(object sender, EventArgs e)
        {
            //int ret = 0;
            int [] calibrationPoints = {1,2,5,9};
            int displayDevice = 0;
            int targetSize = 20;

            ETController.CalibrationStruct calData;
            calData.displayDevice = displayDevice;
            calData.autoAccept = 1;
            calData.method = calibrationPoints[callibrationPointComboBox.SelectedIndex];
            calData.visualization = 1;
            calData.speed = 0;
            calData.targetShape = targetShapeComboBox.SelectedIndex+2;
            calData.backgroundColor = 50;
            calData.foregroundColor = 250;
            calData.targetSize = targetSize;
            calData.targetFilename = "";

            calibrateET.SetupData = calData;
        }

    }
}
